Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Amber Chow


------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such documents include the course's lecture slides and precept handouts.

The man pages on the armlab cluster.

The course's current staff members outside of class time through office hours.

Current Intro Lab TAs through visits to the Intro COS Lab.

------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

N/A

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

Tedious but overall fine

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?


n/a
------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."


symtablelist.c: (in function SymTable_remove)
symtablelist.c:222:9: Variable prior used before definition
  An rvalue is used that may not be initialized to a value on some execution
  path. (Use -usedef to inhibit warning)

        The variable prior keeps track of the node before the current key would be removed. Setting prior->next = current->next allows current to be removed and the nodes before and after are connected. If the first element is the one that needs to be removed prior need not be initialized. The warning is thrown because prior is initialized in a while loop that will not be entered if current is the first element. However, this is the desired logic as explained above and an if statement ensures that current will not be used if not initialized.
------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."


   symtablelist.c: line 90: medium priority:
   Do you want to validate 'pvValue' through an assert?
                No we don't care what the value is, the client can make it NULL if it wants; not an issue
    

   symtablelist.c: line 135: medium priority:
   Do you want to validate 'pvValue' through an assert?
                No we don't care what the value is, the clientcan make it NULL if it wants; not an issue


   symtablelist.c: line 255: medium priority:

                No we don't care what the value is, the client can make it NULL if it wants; not an issue
------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."


symtablehash.c:335:9: Variable prior used before definition
  An rvalue is used that may not be initialized to a value on some execution
  path. (Use -usedef to inhibit warning)


                The variable prior keeps track of the node before the current key in the linked list attached to the relevant bin of the hash table. Setting prior->next = current->next allows current to be removed and the nodes before and after are connected. If the first element is the one that needs to be removed prior need not be initialized. The warning is thrown because prior is initialized in a while loop that will not be entered if current is the first element. However, this is the desired logic as explained above and an if statement ensures that current will not be used if not initialized.

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."



   symtablehash.c: line 116: medium priority:
   Do you want to validate 'pvValue' through an assert?
        No provided by client. Allowed to be NULL

   symtablehash.c: line 237: medium priority:
   Do you want to validate 'pvValue' through an assert?
           No provided by client. Allowed to be NULL

   symtablehash.c: line 369: medium priority:
   Do you want to validate 'pvExtra' through an assert?
           No provided by client. Allowed to be NULL

   symtablehash.c: line 116: low priority:
   This function definition probably needs more local comments
            I put comments at all logical blocks. I would call a private static function SymTable_Expand but I had trouble implementing this so I left the expand algorithm in SymTable_put

   symtablehash.c: line 208: low priority:
   This area is deeply nested at level 4, consider refactoring
            See above. Due to having the implementation fo the expanding feature in SymTable_put this is nested. One nest for seeing if it needs to be expanded. One nest for iterating through the previous hash table. One nest for iterating through the linked lists of the relevant bucket. One nest for differentiating protocol for adding the node into the new hash either as the only node or as an additional node in the linked list.




------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed ________ seconds.
-- 500 bindings consumed ________ seconds.
-- 5000 bindings consumed ________ seconds.
-- 50000 bindings consumed ________ seconds.
-- 500000 bindings consumed ________ seconds.

The non-expanding hash table implementation with:
-- 50 bindings consumed ________ seconds.
-- 500 bindings consumed ________ seconds.
-- 5000 bindings consumed ________ seconds.
-- 50000 bindings consumed ________ seconds.
-- 500000 bindings consumed ________ seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.005290 seconds.
-- 50000 bindings consumed 0.124036 seconds.
-- 500000 bindings consumed 1.614076 seconds.
